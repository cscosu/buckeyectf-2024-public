<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.min.js" integrity="sha384-0pUGZvbkm6XF6gxjEnlmuGrJXVbNuzT9qBBavbLwCsOGabYfZo0T0to5eqruptLy" crossorigin="anonymous"></script>
    <link rel="stylesheet" href="/style.css">
    <title>Meal Grammar</title>
</head>
<body>
    <nav class="navbar navbar-expand-lg sticky-top navbar-dark bg-dark p-3">
        <a class="navbar-brand" href="#">Meal Grammar</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarText" aria-controls="navbarText" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarText">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item active">
                    <a class="nav-link" href="/">Home<span class="sr-only"></span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/chef">Chef</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="./docs/homecooked">Homecooked Docs</a>
                </li>
                <li class="nav-item"></li>
                    <a class="nav-link" href="./docs/meal">Meal Docs</a>
                </li>
                <li class="nav-item"></li>
                    <a class="nav-link" href="/meal.lark">Meal Grammar</a>
                </li>
            </ul>
        </div>
    </nav>
    <h3 class="mx-auto pt-5 w-50 text-center">
        Meal Grammar Reference
    </h3>
    <pre class="py-5">
    body: (statement | eval | html | meal_literal)*
    statement.2: simple_statement | compound_statement
    compound_statement: "🍴" (for_stmt | if_stmt | while_stmt) "🍴"
    simple_statement: "🍴" (assign_stmt | expression) "🍴"
    eval.1: "🥢" expression "🥢"
    html.0: /[^🍴🥢🧆🥄]+/ body
                    
    for_stmt: "🍔" testlist "🍟" expression "🥄"  body "🥄"
    if_stmt: "🍕" test "🥄" body "🥄" ("🥙" expression "🥄" body "🥄")* ("🥪" "🥄" body "🥄")?
    while_stmt: "🌯" test "🥄" body "🥄"
    assign_stmt: name "🍇" expression 

    meal_literal.0: "🧆" /[^🧆]+/ "🧆"
                    
    expression: or_test
    ?test: or_test ("🍕" or_test "🥪" test)?  
    ?or_test: and_test ("🍹" and_test)*
    ?and_test: not_test ("🍸" not_test)*
    ?not_test: "🍷" not_test | comparison
    ?comparison: arith_expr (COMP_OP arith_expr)*
    COMP_OP: "🍰" | "🧁" | "🥧" | "🍫" | "🍬" | "🍭"
    ?arith_expr: term (ARITH_OP term)*
    ?term: factor (FACTOR_OP factor)*
    ?factor: UNARY_OP factor | power
    ?power: atom_expr ("🍚" factor)?
                    
    ?atom_expr: atom_expr "🦀" [arguments] "🦞" -> funccall
            | atom_expr "🍎" subscript_list "🍏" -> getitem
            | atom_expr "🥚" name -> getattr
            | atom
                    
    ?atom: "🍎" _exprlist? "🍏" -> list
        | "🦀" test "🦞"
        | name -> var
        | number 
        | string
        | true 
        | false 
        | none
                    
    arguments: argvalue ("🌭" argvalue)*
    ?argvalue: test kwargvalue?
    kwargvalue: ("🍇" test)
                    
    ?subscript_list: subscript
        | subscript (("🌭" subscript)+ ["🌭"] | "🌭")
    ?subscript: test | ([test] "🍆" [test] [sliceop])
    sliceop: "🍆" [test]
                    
    _exprlist: expression
        | expression (("🌭" expression)+ ["🌭"]|"🌭")
                    
    ?testlist: test | testlist_tuple
    testlist_tuple: test (("🌭" test)+ ["🌭"] | "🌭")

    %import common.WS
    %ignore WS

    number: DEC_NUMBER | HEX_NUMBER | BIN_NUMBER | OCT_NUMBER | FLOAT_NUMBER | IMAG_NUMBER

    ARITH_OP: "🍦" | "🍧"   
    FACTOR_OP: "🍨" | "🍩" | "🍪" | "🎂"
    UNARY_OP: "🥟" | "🥠" | "🥡"
                
    name: /[^\W\d]\w*/
    COMMENT: /#[^\n]*/
                
    true: "🌮"
    false: "🥬"
    none: "🥕"


    string: /([ubf]?r?|r[ubf])("(?!"").*?(?<!\\)(\\\\)*?"|'(?!'').*?(?<!\\)(\\\\)*?')/i

    _SPECIAL_DEC: "0".."9"        ("_"?  "0".."9"                       )*
    DEC_NUMBER:   "1".."9"        ("_"?  "0".."9"                       )*
            |   "0"             ("_"?  "0"                            )* /(?![1-9])/
    HEX_NUMBER.2: "0" ("x" | "X") ("_"? ("0".."9" | "a".."f" | "A".."F"))+
    OCT_NUMBER.2: "0" ("o" | "O") ("_"?  "0".."7"                       )+
    BIN_NUMBER.2: "0" ("b" | "B") ("_"?  "0".."1"                       )+

    _EXP: ("e"|"E") ["+" | "-"] _SPECIAL_DEC
    DECIMAL: "." _SPECIAL_DEC | _SPECIAL_DEC "." _SPECIAL_DEC?
    FLOAT_NUMBER.2: _SPECIAL_DEC _EXP | DECIMAL _EXP?
    IMAG_NUMBER.2: (_SPECIAL_DEC      | FLOAT_NUMBER) ("J" | "j")
    </pre>
</body>